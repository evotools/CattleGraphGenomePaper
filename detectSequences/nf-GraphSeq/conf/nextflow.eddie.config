/*
 * ------------------------------------------------------
 *  Based on the nf-core/rnaseq Nextflow base config file
 * ------------------------------------------------------
 */

executor{
  name = "uge"
	queueSize = 250
  cpu = 1
  memory = 8.GB
  time = 23.h
}

process {

  beforeScript = """
  . /etc/profile.d/modules.sh
  sleep 2;
  module load anaconda
  source activate mutyperenv
  """

  penv = "sharedmem"

  cpus = 1
  memory = 4.GB
  time = 4.h

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'terminate' }
  maxRetries = 5
  maxErrors = '-1'

  withName: hal2maf {
    module = 'singularity'
    executor = "uge"
    cpus = 1
    memory = 32.GB
    clusterOptions = { "-P roslin_ctlgh -l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
  }
  withName: maf2fasta {
    module = 'anaconda'
    executor = "uge"
    cpus = 4
    memory = 16.GB
    clusterOptions = { "-P roslin_ctlgh -l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
  }
  withName: liftToAncestor {
    module = 'singularity'
    executor = "uge"
    cpus = 1
    clusterOptions = { "-P roslin_ctlgh -l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
  }
  withName: makeRefTgtFasta {
    module = ['singularity', 'roslin/samtools/1.10']
    executor = "uge"
    cpus = 1
    clusterOptions = { "-P roslin_ctlgh -l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
  }
  withName: makeAnnotation {
    module = ['roslin/bedtools/2.29.2', 'roslin/python/3.6.8', 'igmm/apps/tabix/0.2.6']
    executor = "uge"
    cpus = 1
    clusterOptions = { "-P roslin_ctlgh -l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
  }
  withName: filtering {
    module = 'igmm/apps/plink/1.90b4'
    executor = "uge"
    cpus = 1
    clusterOptions = { "-P roslin_ctlgh -l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
  }
  withName: mutyper {
    module = ['anaconda', 'roslin/bcftools/1.10']
    executor = "uge"
    cpus = 1
    clusterOptions = { "-P roslin_ctlgh -l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
  }
}
