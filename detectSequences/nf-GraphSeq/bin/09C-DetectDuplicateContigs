#!/usr/bin/env Rscript
## Get duplicate sequences
# Use minimap2 alignments to detect which novel contigs are repeated
options(stringsAsFactors = F, scipen = 999)
library(tidyverse)
library(reshape2)
args = commandArgs(T)

alignments = read_tsv(args[1], col_names = F)
contigs = read_tsv(args[2], col_names = F)
queries <- contigs[,c(1,2)]
colnames(queries) <- c('qseqid', 'qseqlen')
targets <- contigs[,c(1,2)]
colnames(targets) <- c('tseqid', 'tseqlen')
# Add concordance vector
contigs$CONCORDANT = ""
#contigs = contigs %>% arrange(desc(V2))
contigs <- contigs[order(contigs[,2], decreasing = T), ]
cat("Processing ", nrow(alignments), " for ", nrow(contigs), " contigs.\n" )

# Add column names
colnames(alignments) = c("qseqid", "tseqid", "ident", "length", "mismatch", "gapopen", 
                         "qstart", "qend", "tstart", "tend", "evalue", "bitscore")
# Extract non-self-alignments
alignments_filt1 = alignments %>% 
                    filter(qseqid != tseqid) %>%
                    group_by(qseqid, tseqid) %>%
                    arrange(desc(ident) )
cat("Kept ", nrow(alignments_filt1), " alignments between contigs.\n" )

# Add sequence length
alignments_filt2 <- alignments_filt1 %>% left_join(queries) %>% left_join(targets)

# Extract highly similar contigs (>99% identical)
alignments_filt3 = alignments_filt2 %>% filter(ident > 99)
cat("Kept ", nrow(alignments_filt3), " alignments with identity >99%.\n" )

# Remove if length of alignment is less than 95% of the shortest contigs
alignments_filt4 = alignments_filt3 %>% mutate( lratio = length / pmin(qseqlen, tseqlen) ) %>% filter(lratio > 0.95)
cat("Kept ", nrow(alignments_filt4), " alignments spanning 95% of the shortest contig and involving", length(unique(c(alignments_filt4$tseqid, alignments_filt4$qseqid))), "contigs.\n" )

# Group by values, keeping the largest contig
cat("Initial number of contigs (n)                : ", nrow(contigs), "\n")
cat("Initial number of contigs (bp)               : ", sum(contigs[, 2]), "\n")
filter = pull(contigs[, 1]) %in% unique(c(alignments_filt4$tseqid, alignments_filt4$qseqid))
outputs = contigs[!filter,]
cat("Contigs with no/low identity alignments (n)  : ", nrow(outputs), "\n")
cat("Contigs with no/low identity alignments (bp) : ", sum(outputs[, 2]), "\n")
toprocess = contigs[filter,] 
toprocess <- toprocess[order(toprocess[,2], decreasing = T), ]

while (nrow(toprocess) > 0){
  ctgname = pull(toprocess[1, 1])
  tgtalign = alignments_filt4 %>% filter(tseqid == ctgname | qseqid == ctgname)
  if ( nrow(tgtalign) > 0 ){
    outputs = rbind(outputs, toprocess[1, ])
    toadd = unique( c(tgtalign[,"qseqid"], tgtalign[,"tseqid"]) [!grepl(ctgname, c(tgtalign[,"qseqid"], tgtalign[,"tseqid"]))] )
    outputs[pull(outputs[, 1]) == ctgname, "CONCORDANT"] = paste(toadd, c(outputs[outputs[, 1] == ctgname, "CONCORDANT"]), sep = '', collapse = ",")
    toprocess = toprocess[-which( pull(toprocess[, 1]) %in% c(tgtalign$tseqid, tgtalign$qseqid)), ]
    cat(nrow(toprocess), ' contigs left to check\n')
  }
}
cat("Final number of contigs (n)                  : ", nrow(outputs), "\n")
cat("Final number of contigs (bp)                 : ", sum(outputs[, 2]), "\n")

write.table(outputs, args[3], sep = "\t", quote = F, col.names = F, row.names = F)
